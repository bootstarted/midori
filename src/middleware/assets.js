
import { readFileSync } from 'fs';
import indexBy from 'lodash/collection/indexBy';
import path from 'path';
import collect from 'webpack-assets';

const assetPath = './build/client';
const file = path.join(assetPath, 'stats.json');

/**
 * [assets description]
 * @type {Array}
 */
let assets = [ ];

/**
 * A URL index for serving all the assets in the generated webpack stats.
 * This makes it very quick to serve a particular file since it's just a single
 * dictionary lookup.
 * @type {Object}
 */
let index = { };

/**
 * Given a webpack stats object, create a new set of assets and update the asset
 * index based on that.
 * @param {[type]} stats [description]
 * @returns {[type]}       [description]
 */
function update(stats) {
  assets = collect(stats);
  assets.forEach(asset => {
    asset.contents = readFileSync(assetPath + asset.name);
    asset.contentType = mime(asset.name);
  });
  index = indexBy(assets, asset => {
    return asset.publicPath + asset.name;
  });
}

/**
 * Serve assets generated by webpack.
 * @returns {Function} Herp.
 */
export function files() {
  return function({ request }) {
    return function(req, res) {
      if (index[req.url]) {
        if (req.method !== 'GET' && req.method !== 'HEAD') {
          res.statusCode = 405;
          res.setHeader('Allow', 'GET, HEAD');
          res.setHeader('Content-Length', '0');
          res.end();
        } else {
          const asset = index[req.url];
          res.setHeader('ETag', asset.hash);
          res.setHeader('Content-Length', asset.contents.length);
          res.setHeader('Content-Type', asset.contentType);
          res.end(asset.contents);
        }
      } else {
        request(req, res);
      }
    };
  };
}

export function stats() {
  // Standard `webpack` output in production is just a single stats file, so
  // read that and use that for assets.
  update(JSON.parse(readFileSync(file, 'utf8')));

  // `webpack-udev-server` provides events to the process when new assets have
  // been generated for the client portion of the code.
  process.on('webpack-stats', update);

  return function({ request }) {
    return function(req, res) {
      req.assets = assets;
      request(req, res);
    };
  };
}

export default function(options) {
  return compose(files(options), stats(options));
}
