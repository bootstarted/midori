import { readFileSync } from 'fs';
import indexBy from 'lodash/keyBy';
import compose from 'lodash/flowRight';
import collect from 'webpack-assets';
import {dirname} from 'path';
import {create} from './match/util';
import match from './match';
import path from './match/path';
import serve from './serve';

/**
 * Serve assets generated by webpack.
 * @param {Object} stats Webpack stats object.
 * @returns {Function} Herp.
 */
export function asset(stats) {
  const assets = collect(stats);
  const index = indexBy(assets, asset => {
    return asset.url;
  });
  return create((req) => {
    if (index[req.url]) {
      req.asset = index[req.url];
      return true;
    }
    return false;
  });
}

export function request(stats) {
  const assets = collect(stats);
  return function(app) {
    const { request } = app;
    return {
      ...app,
      request(req, res) {
        req.assets = assets;
        request(req, res);
      },
    };
  };
}

/**
 * @param {String} file Path to webpack stats object.
 * @param {Object} options Options passed to `serve`.
 * @returns {Function} Middleware.
 */
export default function(file, options = {
  root: dirname(file),
}) {
  const stats = JSON.parse(readFileSync(file));
  return compose(
    request(stats),
    match(path(stats.publicPath), serve(options))
  );
}
